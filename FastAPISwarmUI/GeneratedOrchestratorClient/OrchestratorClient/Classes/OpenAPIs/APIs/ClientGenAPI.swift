//
// ClientGenAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class ClientGenAPI {

    /**
     Get Client Status
     
     - parameter service: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getClientStatus(service: String, apiResponseQueue: DispatchQueue = OrchestratorClientAPI.apiResponseQueue, completion: @escaping ((_ data: ClientStatusResponse?, _ error: Error?) -> Void)) -> RequestTask {
        return getClientStatusWithRequestBuilder(service: service).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get Client Status
     - GET /v1/clientgen/status/{service}
     - Return the current status of client SDK generation for the given service.
     - parameter service: (path)  
     - returns: RequestBuilder<ClientStatusResponse> 
     */
    open class func getClientStatusWithRequestBuilder(service: String) -> RequestBuilder<ClientStatusResponse> {
        var localVariablePath = "/v1/clientgen/status/{service}"
        let servicePreEscape = "\(APIHelper.mapValueToPathItem(service))"
        let servicePostEscape = servicePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{service}", with: servicePostEscape, options: .literal, range: nil)
        let localVariableURLString = OrchestratorClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ClientStatusResponse>.Type = OrchestratorClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     Regenerate Client
     
     - parameter service: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func regenerateClient(service: String, apiResponseQueue: DispatchQueue = OrchestratorClientAPI.apiResponseQueue, completion: @escaping ((_ data: ClientStatusResponse?, _ error: Error?) -> Void)) -> RequestTask {
        return regenerateClientWithRequestBuilder(service: service).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Regenerate Client
     - POST /v1/clientgen/{service}/regenerate
     - Trigger regeneration of the client SDK for the given service.
     - parameter service: (path)  
     - returns: RequestBuilder<ClientStatusResponse> 
     */
    open class func regenerateClientWithRequestBuilder(service: String) -> RequestBuilder<ClientStatusResponse> {
        var localVariablePath = "/v1/clientgen/{service}/regenerate"
        let servicePreEscape = "\(APIHelper.mapValueToPathItem(service))"
        let servicePostEscape = servicePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{service}", with: servicePostEscape, options: .literal, range: nil)
        let localVariableURLString = OrchestratorClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ClientStatusResponse>.Type = OrchestratorClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }
}
