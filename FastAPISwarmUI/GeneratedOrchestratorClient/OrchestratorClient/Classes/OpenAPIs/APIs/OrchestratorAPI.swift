//
// OrchestratorAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class OrchestratorAPI {

    /**
     Batch Deploy
     
     - parameter deployRequest: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func batchDeploy(deployRequest: DeployRequest, apiResponseQueue: DispatchQueue = OrchestratorClientAPI.apiResponseQueue, completion: @escaping ((_ data: BatchDeployResponse?, _ error: Error?) -> Void)) -> RequestTask {
        return batchDeployWithRequestBuilder(deployRequest: deployRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Batch Deploy
     - POST /v1/deploy
     - Accepts a list of service names in `request.services`.   Returns a BatchDeployResponse with an array of DeployResponse objects.
     - parameter deployRequest: (body)  
     - returns: RequestBuilder<BatchDeployResponse> 
     */
    open class func batchDeployWithRequestBuilder(deployRequest: DeployRequest) -> RequestBuilder<BatchDeployResponse> {
        let localVariablePath = "/v1/deploy"
        let localVariableURLString = OrchestratorClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: deployRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<BatchDeployResponse>.Type = OrchestratorClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     Create Service
     
     - parameter name: (query) Name 
     - parameter serviceSpec: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func createService(name: String, serviceSpec: ServiceSpec, apiResponseQueue: DispatchQueue = OrchestratorClientAPI.apiResponseQueue, completion: @escaping ((_ data: ServiceDetail?, _ error: Error?) -> Void)) -> RequestTask {
        return createServiceWithRequestBuilder(name: name, serviceSpec: serviceSpec).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Create Service
     - POST /v1/services
     - Create a new service.   - **name** (query parameter): unique service name   - **spec** (JSON body): details conforming to ServiceSpec
     - parameter name: (query) Name 
     - parameter serviceSpec: (body)  
     - returns: RequestBuilder<ServiceDetail> 
     */
    open class func createServiceWithRequestBuilder(name: String, serviceSpec: ServiceSpec) -> RequestBuilder<ServiceDetail> {
        let localVariablePath = "/v1/services"
        let localVariableURLString = OrchestratorClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: serviceSpec)

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "name": (wrappedValue: name.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ServiceDetail>.Type = OrchestratorClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     Delete Service
     
     - parameter service: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func deleteService(service: String, apiResponseQueue: DispatchQueue = OrchestratorClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return deleteServiceWithRequestBuilder(service: service).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Delete Service
     - DELETE /v1/services/{service}
     - Delete a service by name. Returns HTTP 204 on success.
     - parameter service: (path)  
     - returns: RequestBuilder<Void> 
     */
    open class func deleteServiceWithRequestBuilder(service: String) -> RequestBuilder<Void> {
        var localVariablePath = "/v1/services/{service}"
        let servicePreEscape = "\(APIHelper.mapValueToPathItem(service))"
        let servicePostEscape = servicePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{service}", with: servicePostEscape, options: .literal, range: nil)
        let localVariableURLString = OrchestratorClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = OrchestratorClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     Deploy Service
     
     - parameter service: (path)  
     - parameter deployRequest: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func deployService(service: String, deployRequest: DeployRequest, apiResponseQueue: DispatchQueue = OrchestratorClientAPI.apiResponseQueue, completion: @escaping ((_ data: DeployResponse?, _ error: Error?) -> Void)) -> RequestTask {
        return deployServiceWithRequestBuilder(service: service, deployRequest: deployRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Deploy Service
     - POST /v1/services/{service}/deploy
     - Trigger a deployment for the specified service.
     - parameter service: (path)  
     - parameter deployRequest: (body)  
     - returns: RequestBuilder<DeployResponse> 
     */
    open class func deployServiceWithRequestBuilder(service: String, deployRequest: DeployRequest) -> RequestBuilder<DeployResponse> {
        var localVariablePath = "/v1/services/{service}/deploy"
        let servicePreEscape = "\(APIHelper.mapValueToPathItem(service))"
        let servicePostEscape = servicePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{service}", with: servicePostEscape, options: .literal, range: nil)
        let localVariableURLString = OrchestratorClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: deployRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<DeployResponse>.Type = OrchestratorClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     Get Config
     
     - parameter service: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getConfig(service: String, apiResponseQueue: DispatchQueue = OrchestratorClientAPI.apiResponseQueue, completion: @escaping ((_ data: ConfigDetail?, _ error: Error?) -> Void)) -> RequestTask {
        return getConfigWithRequestBuilder(service: service).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get Config
     - GET /v1/services/{service}/config
     - Retrieve the current config (env & ports) for the specified service.
     - parameter service: (path)  
     - returns: RequestBuilder<ConfigDetail> 
     */
    open class func getConfigWithRequestBuilder(service: String) -> RequestBuilder<ConfigDetail> {
        var localVariablePath = "/v1/services/{service}/config"
        let servicePreEscape = "\(APIHelper.mapValueToPathItem(service))"
        let servicePostEscape = servicePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{service}", with: servicePostEscape, options: .literal, range: nil)
        let localVariableURLString = OrchestratorClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ConfigDetail>.Type = OrchestratorClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     Get Logs
     
     - parameter service: (path)  
     - parameter tail: (query) Tail (optional, default to 100)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getLogs(service: String, tail: Int? = nil, apiResponseQueue: DispatchQueue = OrchestratorClientAPI.apiResponseQueue, completion: @escaping ((_ data: String?, _ error: Error?) -> Void)) -> RequestTask {
        return getLogsWithRequestBuilder(service: service, tail: tail).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get Logs
     - GET /v1/services/{service}/logs
     - Return the last `tail` lines of logs for the given service.
     - parameter service: (path)  
     - parameter tail: (query) Tail (optional, default to 100)
     - returns: RequestBuilder<String> 
     */
    open class func getLogsWithRequestBuilder(service: String, tail: Int? = nil) -> RequestBuilder<String> {
        var localVariablePath = "/v1/services/{service}/logs"
        let servicePreEscape = "\(APIHelper.mapValueToPathItem(service))"
        let servicePostEscape = servicePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{service}", with: servicePostEscape, options: .literal, range: nil)
        let localVariableURLString = OrchestratorClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "tail": (wrappedValue: tail?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<String>.Type = OrchestratorClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     Get Service
     
     - parameter service: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getService(service: String, apiResponseQueue: DispatchQueue = OrchestratorClientAPI.apiResponseQueue, completion: @escaping ((_ data: ServiceDetail?, _ error: Error?) -> Void)) -> RequestTask {
        return getServiceWithRequestBuilder(service: service).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get Service
     - GET /v1/services/{service}
     - Fetch detailed information about a single service.
     - parameter service: (path)  
     - returns: RequestBuilder<ServiceDetail> 
     */
    open class func getServiceWithRequestBuilder(service: String) -> RequestBuilder<ServiceDetail> {
        var localVariablePath = "/v1/services/{service}"
        let servicePreEscape = "\(APIHelper.mapValueToPathItem(service))"
        let servicePostEscape = servicePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{service}", with: servicePostEscape, options: .literal, range: nil)
        let localVariableURLString = OrchestratorClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ServiceDetail>.Type = OrchestratorClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     Health
     
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func health(apiResponseQueue: DispatchQueue = OrchestratorClientAPI.apiResponseQueue, completion: @escaping ((_ data: HealthResponse?, _ error: Error?) -> Void)) -> RequestTask {
        return healthWithRequestBuilder().execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Health
     - GET /v1/health
     - Returns {\"status\":\"ok\",\"uptime\":\"XhYmZs\"}.
     - returns: RequestBuilder<HealthResponse> 
     */
    open class func healthWithRequestBuilder() -> RequestBuilder<HealthResponse> {
        let localVariablePath = "/v1/health"
        let localVariableURLString = OrchestratorClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<HealthResponse>.Type = OrchestratorClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     List Services
     
     - parameter limit: (query) Limit (optional, default to 50)
     - parameter offset: (query) Offset (optional, default to 0)
     - parameter status: (query) Status (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func listServices(limit: Int? = nil, offset: Int? = nil, status: String? = nil, apiResponseQueue: DispatchQueue = OrchestratorClientAPI.apiResponseQueue, completion: @escaping ((_ data: ServiceListResponse?, _ error: Error?) -> Void)) -> RequestTask {
        return listServicesWithRequestBuilder(limit: limit, offset: offset, status: status).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     List Services
     - GET /v1/services
     - Retrieve a paginated list of services. Optional filter on `status` if provided.
     - parameter limit: (query) Limit (optional, default to 50)
     - parameter offset: (query) Offset (optional, default to 0)
     - parameter status: (query) Status (optional)
     - returns: RequestBuilder<ServiceListResponse> 
     */
    open class func listServicesWithRequestBuilder(limit: Int? = nil, offset: Int? = nil, status: String? = nil) -> RequestBuilder<ServiceListResponse> {
        let localVariablePath = "/v1/services"
        let localVariableURLString = OrchestratorClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "limit": (wrappedValue: limit?.encodeToJSON(), isExplode: true),
            "offset": (wrappedValue: offset?.encodeToJSON(), isExplode: true),
            "status": (wrappedValue: status?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ServiceListResponse>.Type = OrchestratorClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     Patch Config
     
     - parameter service: (path)  
     - parameter configPatch: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func patchConfig(service: String, configPatch: ConfigPatch, apiResponseQueue: DispatchQueue = OrchestratorClientAPI.apiResponseQueue, completion: @escaping ((_ data: ConfigDetail?, _ error: Error?) -> Void)) -> RequestTask {
        return patchConfigWithRequestBuilder(service: service, configPatch: configPatch).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Patch Config
     - PATCH /v1/services/{service}/config
     - Partially update the service configuration. Only the fields provided in ConfigPatch will be modified.
     - parameter service: (path)  
     - parameter configPatch: (body)  
     - returns: RequestBuilder<ConfigDetail> 
     */
    open class func patchConfigWithRequestBuilder(service: String, configPatch: ConfigPatch) -> RequestBuilder<ConfigDetail> {
        var localVariablePath = "/v1/services/{service}/config"
        let servicePreEscape = "\(APIHelper.mapValueToPathItem(service))"
        let servicePostEscape = servicePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{service}", with: servicePostEscape, options: .literal, range: nil)
        let localVariableURLString = OrchestratorClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: configPatch)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ConfigDetail>.Type = OrchestratorClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PATCH", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     Rollback Service
     
     - parameter service: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func rollbackService(service: String, apiResponseQueue: DispatchQueue = OrchestratorClientAPI.apiResponseQueue, completion: @escaping ((_ data: DeployResponse?, _ error: Error?) -> Void)) -> RequestTask {
        return rollbackServiceWithRequestBuilder(service: service).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Rollback Service
     - POST /v1/services/{service}/rollback
     - Initiate a rollback for the specified service.
     - parameter service: (path)  
     - returns: RequestBuilder<DeployResponse> 
     */
    open class func rollbackServiceWithRequestBuilder(service: String) -> RequestBuilder<DeployResponse> {
        var localVariablePath = "/v1/services/{service}/rollback"
        let servicePreEscape = "\(APIHelper.mapValueToPathItem(service))"
        let servicePostEscape = servicePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{service}", with: servicePostEscape, options: .literal, range: nil)
        let localVariableURLString = OrchestratorClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<DeployResponse>.Type = OrchestratorClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }
}
